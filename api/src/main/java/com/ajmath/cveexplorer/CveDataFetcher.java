package com.ajmath.cveexplorer;

import com.ajmath.cveexplorer.generated.Cve;
import com.ajmath.cveexplorer.generated.CvePageData;
import com.ajmath.cveexplorer.generated.CveSearchInput;
import com.ajmath.cveexplorer.generated.CveSearchResult;
import com.fasterxml.jackson.databind.ObjectMapper;
import graphql.schema.DataFetcher;
import graphql.schema.DataFetchingEnvironment;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import java.util.Collection;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.function.Predicate;
import java.util.stream.Stream;

import static java.util.stream.Collectors.toList;

@Component
public class CveDataFetcher implements DataFetcher<CveSearchResult> {

  @Autowired
  private CveDataStore dataStore;

  private ObjectMapper mapper = new ObjectMapper();

  @Override
  public CveSearchResult get(DataFetchingEnvironment environment) throws Exception {
    CveSearchInput input =
      environment.containsArgument("input") ?
        mapper.convertValue(environment.getArgument("input"), CveSearchInput.class) : getDefaultSearchInput();

    if (input.getLimit() > 100 || input.getLimit() <= 0) {
      throw new IllegalArgumentException("Limit must be between 1 and 100");
    }

    Stream<Cve> resultStream = dataStore.stream();

    if (input.getBeforeIndex() != null) {
      resultStream = resultStream.filter(c -> c.getIndex().compareTo(input.getBeforeIndex()) < 0);
    }
    if (input.getAfterIndex() != null) {
      resultStream = resultStream.filter(c -> c.getIndex().compareTo(input.getAfterIndex()) > 0);
    }
    if (input.getQuery() != null) {
      resultStream = resultStream.filter(this.queryFilter(input.getQuery()));
    }

    return getCveSearchResult(input, resultStream);
  }

  private CveSearchResult getCveSearchResult(CveSearchInput input, Stream<Cve> resultStream) {
    Collection<Cve> resultsPlus1 = resultStream
      .limit(input.getLimit() + 1)
      .collect(toList());

    Collection<Cve> results = resultsPlus1
      .stream()
      .limit(input.getLimit())
      .collect(toList());

    CveSearchResult result = new CveSearchResult();
    result.setResults(results);

    if (result.getResults().size() > 0) {
      result.setPrevPageInput(new CvePageData() {{
        Integer maxId = results.stream().map(Cve::getIndex).max(Integer::compareTo).orElse(null);
        this.setAfterIndex(maxId);
        this.setLimit(input.getLimit());
        this.setQuery(input.getQuery());
      }});
    }

    boolean hasMoreData = resultsPlus1.size() > results.size();
    if (hasMoreData) {
      result.setNextPageInput(new CvePageData(){{
        Integer minId = results.stream().map(Cve::getIndex).min(Integer::compareTo).orElse(null);
        this.setBeforeIndex(minId);
        this.setLimit(input.getLimit());
        this.setQuery(input.getQuery());
      }});
    }

    return result;
  }

  private Predicate<Cve> queryFilter(String searchTerms) {
    return (Cve c) -> Utils.stringContainsIgnoreCase(c.getDescription(), searchTerms);
  }

  private static CveSearchInput getDefaultSearchInput() {
    CveSearchInput input = new CveSearchInput();
    input.setLimit(25);
    return input;
  }
}
