import React, {createContext, useContext, useReducer, Reducer, Dispatch} from 'react';
import { CveSearchInput } from './gql-gen';

// Based on https://medium.com/simply/state-management-with-react-hooks-and-context-api-at-10-lines-of-code-baf6be8302c

export interface AppState {
  searchInput: CveSearchInput;
  nextSearchInput: CveSearchInput | null;
  prevSearchInput: CveSearchInput | null;
}
const defaultState: AppState = {
  searchInput: {
    query: "",
    limit: 12,
  },
  nextSearchInput: null,
  prevSearchInput: null,
};

export type AppReducer = Reducer<AppState, Actions>;
export const StateContext = createContext<[ AppState, Dispatch<Actions> ]>([
  defaultState,
  () => void 0,
]);

export enum ActionType {
  NEXT_PAGE,
  PREV_PAGE,
  UPDATE_STATE,
}
interface Action<T extends ActionType> {
  type: T;
}

interface NextPageAction extends Action<ActionType.NEXT_PAGE> {}
interface PrevPageAction extends Action<ActionType.PREV_PAGE> {}
interface UpdateStateAction extends Action<ActionType.UPDATE_STATE> {
  newState: Partial<AppState>;
}

export type Actions = NextPageAction | PrevPageAction | UpdateStateAction;

export const reducer: AppReducer = (state, action) => {
  switch (action.type) {
    case ActionType.NEXT_PAGE:
      if (!state.nextSearchInput) {
        break;
      }
      return {
        ...state,
        searchInput: {
          ...state.nextSearchInput,
          __typename: undefined,
        },
        nextSearchInput: null,
      };
    case ActionType.PREV_PAGE:
      if (!state.prevSearchInput) {
        break;
      }
      return {
        ...state,
        searchInput: {
          ...state.prevSearchInput,
          __typename: undefined,
        },
        prevSearchInput: null,
      };
    case ActionType.UPDATE_STATE:
      const updatedState = {
        ...state,
        ...action.newState,
      };
      if (JSON.stringify(state) === JSON.stringify(updatedState)) {
        return state;
      }
      return updatedState;
  }
  return state;
};

interface StateProviderProps {
  injectedReducer?: AppReducer;
  injectedDefaultState?: AppState;
}
export const StateProvider: React.FC<StateProviderProps> = (props) => {
  const { children, injectedReducer = reducer, injectedDefaultState = defaultState } = props;
  return (
    <StateContext.Provider value={useReducer<AppReducer>(injectedReducer, injectedDefaultState)}>
      {children}
    </StateContext.Provider>
  );
};

export const useStateValue = () => useContext(StateContext);
