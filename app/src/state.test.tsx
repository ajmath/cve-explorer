import { AppState, reducer, ActionType } from "./state";

describe("state", () => {
  let initialState: AppState;

  beforeEach(() => {
    initialState = {
      searchInput: {
        query: "",
        limit: 12,
      },
      prevSearchInput: null,
      nextSearchInput: null,
    };
  });

  describe("reducer actions", () => {
    describe("NEXT_PAGE", () => {
      it("can increment the page", () => {
        initialState = {
          ...initialState,
          nextSearchInput: {
            limit: 543,
            beforeIndex: 22,
          },
        };
        const newState = reducer(initialState, { type: ActionType.NEXT_PAGE });
        expect(newState).toEqual({
          searchInput: {
            limit: 543,
            beforeIndex: 22,
          },
          prevSearchInput: null,
          nextSearchInput: null,
        });
      });

      it("doesn't do anything if no next input in state", () => {
        const newState = reducer(initialState, { type: ActionType.NEXT_PAGE });
        expect(newState).toEqual(initialState);
      });
    });

    describe("PREV_PAGE", () => {
      it("can decrement the page", () => {
        initialState = {
          ...initialState,
          prevSearchInput: {
            limit: 11,
            afterIndex: 999,
          },
        };
        const newState = reducer(initialState, { type: ActionType.PREV_PAGE });
        expect(newState).toEqual({
          searchInput: {
            limit: 11,
            afterIndex: 999,
          },
          prevSearchInput: null,
          nextSearchInput: null,
        });
      });

      it("doesn't do anything if no next input in state", () => {
        const newState = reducer(initialState, { type: ActionType.PREV_PAGE });
        expect(newState).toEqual(initialState);
      });
    });

    describe("UPDATE_STATE", () => {
      it("returns the same object when state hasn't changed", () => {
        const newState = reducer(initialState, {
          type: ActionType.UPDATE_STATE,
          newState: {
           ...initialState,
           searchInput: {
             ...initialState.searchInput,
             limit: 12,
           },
          },
        });

        expect(newState).toStrictEqual(initialState);
      });

      it("returns a new object with updated state", () => {
        const partialNewState = {
          nextSearchInput: {
            afterIndex: 1,
            limit: 12,
          },
          prevSearchInput: {
            beforeIndex: 10,
            limit: 12
          },
        };
        const newState = reducer(initialState, {
          type: ActionType.UPDATE_STATE,
          newState: partialNewState,
        });

        expect(newState).toEqual({
          ...initialState,
          ...partialNewState,
        });
      });
    });
  });
});
