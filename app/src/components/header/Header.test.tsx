import React from "react";
import { mount } from "enzyme";
import { Header } from "./Header";
import { InputBase } from "@material-ui/core";
import { StateProvider, AppState, AppReducer, Actions, ActionType } from "../../state";
import ArrowRightIcon from "@material-ui/icons/KeyboardArrowRightRounded";
import ArrowLeftIcon from "@material-ui/icons/KeyboardArrowLeftRounded";

describe("header component", () => {
  let mockState: AppState;
  let dispatchedActions: Actions[];

  const mockReducer: AppReducer = (state, action) => {
    dispatchedActions.push(action);
    return state;
  };

  beforeEach(() => {
    mockState = {
      searchInput: {
        query: "Some query text",
        limit: 12,
      },
      prevSearchInput: null,
      nextSearchInput: null,
    };
    dispatchedActions = [];
  });

  it("initializes with searchbox populated from state", () => {
    const testComponent = (
      <StateProvider injectedDefaultState={mockState}>
        <Header />
      </StateProvider>
    );
    const wrapper = mount(testComponent);
    expect(wrapper.find(InputBase).props()).toMatchObject({
      placeholder: "Searchâ€¦",
      value: mockState.searchInput.query,
    });
  });

  it("dispatches PREV_PAGE actions when pressing left arrow", () => {
    const testComponent = (
      <StateProvider injectedDefaultState={mockState} injectedReducer={mockReducer}>
        <Header />
      </StateProvider>
    );
    expect(dispatchedActions).toHaveLength(0);
    const wrapper = mount(testComponent);
    wrapper.find(ArrowLeftIcon).simulate("click");

    expect(dispatchedActions).toHaveLength(1);
    expect(dispatchedActions[0].type).toEqual(ActionType.PREV_PAGE);
  });

  it("dispatches NEXT_PAGE actions when pressing right arrow", () => {
    const testComponent = (
      <StateProvider injectedDefaultState={mockState} injectedReducer={mockReducer}>
        <Header />
      </StateProvider>
    );
    expect(dispatchedActions).toHaveLength(0);
    const wrapper = mount(testComponent);
    wrapper.find(ArrowRightIcon).simulate("click");

    expect(dispatchedActions).toHaveLength(1);
    expect(dispatchedActions[0].type).toEqual(ActionType.NEXT_PAGE);
  });

  it("dispatches UPDATE_STATE action when updating search text", () => {
    const testComponent = (
      <StateProvider injectedDefaultState={mockState} injectedReducer={mockReducer}>
        <Header />
      </StateProvider>
    );
    const wrapper = mount(testComponent);

    const changeEvent = { target: { value: "javascript" } } as any;
    wrapper.find(InputBase).props().onChange!(changeEvent);

    expect(dispatchedActions).toHaveLength(1);
    expect(dispatchedActions[0].type).toEqual(ActionType.UPDATE_STATE);
    expect((dispatchedActions[0] as any).newState.searchInput.query).toEqual("javascript");
  });
});
