import { useQuery } from "@apollo/react-hooks";
import { Box, CircularProgress, Container, Icon, makeStyles } from "@material-ui/core";
import { loader } from "graphql.macro";
import * as React from "react";
import { CveInfoFragment, CveSearchInput, CveSearchQuery, CveSearchQueryVariables } from "../../gql-gen";
import { CveCard } from "./CveCard";
import { useStateValue, ActionType } from "../../state";

export const CVE_SEARCH = loader("./CveList.graphql");
const useCveSearch = (input?: CveSearchInput) => {
  return useQuery<CveSearchQuery, CveSearchQueryVariables>(CVE_SEARCH, {
    variables: {
      input: input === null ? undefined : input,
    },
  });
};

const useStyles = makeStyles({
  formContainer: {
    display: "flex",
    flexDirection: "column",
    align: "flex-start",
  },
  cveContainer: {
    display: "flex",
    flexWrap: "wrap",
    justifyContent: "center",
  },
});

export const CveList: React.FC = () => {
  const classes = useStyles();

  const [{ searchInput }, dispatch] = useStateValue();
  const { data, loading, error } = useCveSearch(searchInput);

  if (loading) {
    return <CircularProgress />;
  }

  if (error || !data || !data.cveSearch) {
    console.error(error);
    return <Icon>error</Icon>;
  }

  dispatch({
    type: ActionType.UPDATE_STATE,
    newState: {
      nextSearchInput: data.cveSearch.nextPageInput,
      prevSearchInput: data.cveSearch.prevPageInput,
    },
  });

  const cves: CveInfoFragment[] = data.cveSearch.results ? data.cveSearch.results : [];
  return (
    <Container>
      <Box className={classes.cveContainer}>
        {cves.map(cve => (
          <CveCard key={cve.id} cve={cve} />
        ))}
      </Box>
    </Container>
  );
};
