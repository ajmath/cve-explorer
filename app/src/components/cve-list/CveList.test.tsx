import * as React from "react";
import { create, act, ReactTestRenderer } from "react-test-renderer";
import { MockedProvider } from "@apollo/react-testing";
import { CveList, CVE_SEARCH } from "./CveList";
import { StateProvider, AppState, Actions, AppReducer } from "../../state";
import wait from "waait";

describe("CveList", () => {
  let mockState: AppState;
  let dispatchedActions: Actions[];

  const mockReducer: AppReducer = (state, action) => {
    dispatchedActions.push(action);
    return state;
  };

  beforeEach(() => {
    mockState = {
      searchInput: {
        query: "javascript",
        limit: 12,
      },
      prevSearchInput: null,
      nextSearchInput: null,
    };
    dispatchedActions = [];
  });

  function renderComponent(mocks: any): ReactTestRenderer {
    let root: ReactTestRenderer;
    act(() => {
      root = create(
        <StateProvider injectedDefaultState={mockState} injectedReducer={mockReducer}>
          <MockedProvider mocks={mocks}>
            <CveList />
          </MockedProvider>
        </StateProvider>
      );
    });
    return root!;
  }

  it.skip("should create CveCards from cves in response", async () => {
    const results = [];
    for (let i = 0; i < 12; i++) {
      results.push({ __typename: "Cve", id: `CVE-${i}` });
    }
    const wrapper = renderComponent([
      {
        request: {
          query: CVE_SEARCH,
          variables: {
            input: {
              query: "javascript",
              limit: 12,
            },
          },
        },
        result: {
          data: {
            cveSearch: {
              __typename: "CveSearchResult",
              results,
              prevPageInput: {
                __typename: "CvePageData",
                beforeIndex: null,
                afterIndex: 4803,
                limit: 12,
                query: "javascript",
              },
              nextPageInput: {
                __typename: "CvePageData",
                beforeIndex: 2730,
                afterIndex: null,
                limit: 12,
                query: "javascript",
              },
            },
          },
        },
      },
    ]);

    await wait(0);

    expect(wrapper.toJSON()).toContain("butts");

    //expect(wrapper.).toEqual(20);
  });

  it("should create show a spinner when loading", () => {
    const results = [];
    for (let i = 0; i < 12; i++) {
      results.push({ id: `CVE-${i}` });
    }
    const component = renderComponent([]);

    expect(component.toJSON()!.props.role).toEqual("progressbar");
  });
});
